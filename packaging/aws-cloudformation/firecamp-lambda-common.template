{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description": "This template creates the Lambda Role, and the destroy function that cleans up the Lambda ENI.",
  "Parameters":{
    "ClusterName":{
      "Type":"String",
      "Description":"Name of the ECS cluster.",
      "Default":"default",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters, numbers, or hyphens."
    },
    "QSS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "Default": "jazzl0ver",
      "Type": "String",
      "ConstraintDescription": "The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Description": "S3 bucket name for the CloudFormation templates. The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    },
    "QSS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). Example: jazzl0ver/redis/latest/",
      "Type": "String"
    },
    "S3ObjectLambdaZip": {
      "AllowedPattern": "^[0-9a-zA-Z-/.]*$",
      "ConstraintDescription": "Lambda zip can include numbers, lowercase letters, uppercase letters, dot (.), hyphens (-), and forward slash (/).",
      "Description": "S3 key for the Lambda function zip object. Example: scripts/redis-lambda.zip",
      "Type": "String"
    }
  },
  "Resources":{
    "LambdaZipsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "Tags": []
      }
    },
    "CopyZips": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CopyZipsFunction",
            "Arn"
          ]
        },
        "DestBucket": {
          "Ref": "LambdaZipsBucket"
        },
        "SourceBucket": {
          "Ref": "QSS3BucketName"
        },
        "Prefix": {
          "Ref": "QSS3KeyPrefix"
        },
        "Objects": [
          {
            "Ref": "S3ObjectLambdaZip"
          }
        ]
      }
    },
    "CopyZipsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "CopyZipsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "QSS3BucketName"
                        },
                        "/*"
                      ]
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetBucketLocation"
                ],
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "QSS3BucketName"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:DeleteObject"
                ],
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "LambdaZipsBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "arn:aws:logs:*:*:*"
                ]
              }
            ]
          }
        }]
      }
    },
    "CopyZipsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Copies objects from a source S3 bucket to a destination, as Lambda function could only get function zip from the bucket in the same region",
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Role": {
          "Fn::GetAtt": [
            "CopyZipsRole",
            "Arn"
          ]
        },
        "Timeout": 240,
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import json",
                "import logging",
                "import threading",
                "",
                "import boto3",
                "",
                "import cfnresponse",
                "",
                "",
                "def copy_objects(source_bucket, dest_bucket, prefix, objects):",
                "    s3 = boto3.client('s3')",
                "    for o in objects:",
                "        key = prefix + o",
                "        copy_source = {",
                "            'Bucket': source_bucket,",
                "            'Key': key",
                "        }",
                "        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)",
                "",
                "",
                "def delete_objects(bucket, prefix, objects):",
                "    s3 = boto3.client('s3')",
                "    objects = {'Objects': [{'Key': prefix + o} for o in objects]}",
                "    s3.delete_objects(Bucket=bucket, Delete=objects)",
                "",
                "",
                "def timeout(event, context):",
                "    logging.error('Execution is about to time out, sending failure response to CloudFormation')",
                "    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)",
                "",
                "",
                "def handler(event, context):",
                "    # make sure we send a failure to CloudFormation if the function is going to timeout",
                "    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])",
                "    timer.start()",
                "",
                "    print('Received event: %s' % json.dumps(event))",
                "    status = cfnresponse.SUCCESS",
                "    try:",
                "        source_bucket = event['ResourceProperties']['SourceBucket']",
                "        dest_bucket = event['ResourceProperties']['DestBucket']",
                "        prefix = event['ResourceProperties']['Prefix']",
                "        objects = event['ResourceProperties']['Objects']",
                "        if event['RequestType'] == 'Delete':",
                "            delete_objects(dest_bucket, prefix, objects)",
                "        else:",
                "            copy_objects(source_bucket, dest_bucket, prefix, objects)",
                "    except Exception as e:",
                "        logging.error('Exception: %s' % e, exc_info=True)",
                "        status = cfnresponse.FAILED",
                "    finally:",
                "        timer.cancel()",
                "        cfnresponse.send(event, context, status, {}, None)",
                ""
              ]
            ]
          }
        }
      }
    },
    "CopyZipsFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DependsOn": "CopyZipsFunction",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "/",
            [
              {"Ref": "ClusterName"},
              "aws/lambda",
              {"Ref": "CopyZipsFunction"}
            ]
          ]
        },
        "RetentionInDays": 1
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Action": ["sts:AssumeRole"],
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            }
          }],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "LambdaExecPolicy",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:logs:*:*:*"
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DetachNetworkInterface",
                  "ec2:DeleteNetworkInterface",
                  "ec2:DescribeVolumes",
                  "ec2:DeleteVolume"
                ],
                "Effect": "Allow",
                "Resource": "*"
              }
            ],
            "Version": "2012-10-17"
          }
        }]
      }
    },

    "VPCDestroyENIFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require('cfn-response');\n",
                "var AWS = require('aws-sdk');\n",
                "exports.handler = function(event, context) {\n",
                "  // https://stackoverflow.com/questions/41299662/aws-lambda-created-eni-not-deleting-while-deletion-of-stack\n",
                "  console.log(\"REQUEST RECEIVED:\", JSON.stringify(event));\n",
                "  if (event.RequestType != 'Delete') {\n",
                "    response.send(event, context, response.SUCCESS, {});\n",
                "    return;\n",
                "  }\n",
                "\n",
                "  // https://github.com/hashicorp/terraform/issues/5767\n",
                "  var ec2 = new AWS.EC2();\n",
                "  var params = {\n",
                "    Filters: [\n",
                "      {\n",
                "        Name: 'group-id',\n",
                "        Values: event.ResourceProperties.SecurityGroups\n",
                "      },\n",
                "      {\n",
                "        Name: 'description',\n",
                "        Values: ['AWS Lambda VPC ENI: *']\n",
                "      }\n",
                "    ]\n",
                "  };\n",
                "\n",
                "  console.log(\"Deleting attachments!\");\n",
                "  // Detach all network-interface attachments\n",
                "  ec2.describeNetworkInterfaces(params).promise().then(function(data) {\n",
                "    console.log(\"Got Interfaces:\", JSON.stringify(data));\n",
                "    return Promise.all(data.NetworkInterfaces.map(function(networkInterface) {\n",
                "      var networkInterfaceId = networkInterface.NetworkInterfaceId;\n",
                "      var attachmentId = networkInterface.Attachment.AttachmentId;\n",
                "      return ec2.detachNetworkInterface({AttachmentId: attachmentId}).promise().then(function(data) {\n",
                "        return ec2.waitFor('networkInterfaceAvailable', {NetworkInterfaceIds: [networkInterfaceId]}).promise();\n",
                "      }).then(function(data) {\n",
                "        console.log(\"Detached Interface, deleting:\", networkInterfaceId);\n",
                "        return ec2.deleteNetworkInterface({NetworkInterfaceId: networkInterfaceId}).promise();\n",
                "      });\n",
                "    }));\n",
                "  }).then(function(data) {\n",
                "    console.log(\"Success!\");\n",
                "    response.send(event, context, response.SUCCESS, {});\n",
                "  }).catch(function(err) {\n",
                "    console.log(\"Failure:\", JSON.stringify(err));\n",
                "    response.send(event, context, response.FAILED, {});\n",
                "  });\n",
                "};\n"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": "300",
        "Runtime": "nodejs4.3"
      }
    },
    "VPCDestroyENIFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DependsOn": "VPCDestroyENIFunction",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "/",
            [
              {"Ref": "ClusterName"},
              "aws/lambda",
              {"Ref": "VPCDestroyENIFunction"}
            ]
          ]
        },
        "RetentionInDays": 1
      }
    }
  },
  "Outputs": {
    "DestBucket": {
      "Value": {
        "Ref": "LambdaZipsBucket"
      }
    },
    "LambdaDestObject": {
      "Value": {
        "Fn::Join": [
          "",
          [
            { "Ref": "QSS3KeyPrefix" },
            { "Ref": "S3ObjectLambdaZip" }
          ]
        ]
      }
    },
    "LambdaExecutionRoleArn": {
      "Value": {
        "Fn::GetAtt" : [
          "LambdaExecutionRole",
          "Arn"
        ]
      }
    },
    "VPCDestroyENIFunctionArn": {
      "Value": {
        "Fn::GetAtt": [
          "VPCDestroyENIFunction",
          "Arn"
        ]
      }
    }
  }
}
